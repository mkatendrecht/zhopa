import asyncio
import ccxt
import time
from collections import defaultdict
import ccxt.async_support as ccxt_async
import os

# --- Configuration ---
EXCHANGES_TO_CHECK = [
    'binance', 'kucoin', 'bybit', 'gateio', 'mexc', 'okx', 
    'kraken', 'bingx', 'bitget', 'htx'
]

# NEW: Define which stablecoins we'll treat as equivalent (value ~ $1.00)
# FDUSD is Binance's new preferred stablecoin, BUSD is being phased out but still exists.
STABLECOINS = {'USDT', 'USDC', 'BUSD', 'TUSD', 'FDUSD', 'DAI'}

# MODIFIED: Symbols list now includes pairs with different stablecoins to find more opportunities
SYMBOLS_TO_CHECK = [
    'BTC/USDT', 'BTC/USDC', 'BTC/TUSD', 'BTC/FDUSD',
    'ETH/USDT', 'ETH/USDC', 'ETH/BUSD',
    'SOL/USDT', 'SOL/USDC',
    'XRP/USDT', 'XRP/USDC',
    'DOGE/USDT', 'DOGE/BUSD',
]

PROFIT_THRESHOLD = 0.15  # In percentage, for instant alerts
REPORT_INTERVAL = 60    # Interval in seconds for the periodic report

# --- ASCII ART for Shutdown ---
ASCII_FAREWELL = r"""
                                                                                                      
                                                                                                            
                                                 ZZZZZZZZZZ                                                 
                                            ZXUSRRQQQQQQQQRRSUXZ                                            
                                        YVSQQQQQQQQQQQQQQQQQQQQQQSVYZ                                       
                                    ZZVQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQUZZ                                    
                                   YRQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQRY                                   
                                 XRQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQRX                                 
                               ZTQQQQQQQQQQQQQQQQQQQQSRQQQQQQQQQQQQQQQQQQQQSZ                               
                             ZXQQQQQQQQQQQQQQQQQQQQQRY ZTQRWURQQQQQQQQQQQQQQQXZ                             
                             WQQQQQQQQQQQQQQQQQQQQQQTZ YQQUZ XQQQQQQQQQQQQQQQQW                             
                           ZVQQQQQQQQQQQQQQQQV  ZZXWY ZUQQZ ZUQQQQQQQQQQQQQQQQQVZ                           
                           XQQQQQQQQQQQQQQQQQXYZZ           ZTRQQQQQQQQQQQQQQQQQX                           
                          ZRQQQQQQQQQQQQQQQQQQQQSZ            ZZYRQQQQQQQQQQQQQQRZ                          
                         ZUQQQQQQQQQQQQQQQQQQQQQTZ    TQQRTWZ    ZXQQQQQQQQQQQQQQTZ                         
                         ZSQQQQQQQQQQQQQQQQQQQQQX    YQQQQQQRX     UQQQQQQQQQQQQQRY                         
                         XQQQQQQQQQQQQQQQQQQQQQSZ   ZUQQQQQQRX     UQQQQQQQQQQQQQQX                         
                         WQQQQQQQQQQQQQQQQQQQQQW    ZYWUTSTVYZ    ZRQQQQQQQQQQQQQQW                         
                         WQQQQQQQQQQQQQQQQQQQQUZ               ZYUQQQQQQQQQQQQQQQQV                         
                         WQQQQQQQQQQQQQQQQQQQQUZ   ZTQQSVYZZ    ZSQQQQQQQQQQQQQQQQW                         
                         XQQQQQQQQQQQQQQQQQQQQX    YQQQQQQQTZ    ZWQQQQQQQQQQQQQQQX                         
                         YRQQQQQQQQQQQQQQQRQQTZ   ZUQQQQQQQQTZ    ZSQQQQQQQQQQQQQRY                         
                         ZUQQQQQQQQQQQQQQW        YSQQQQQQQRY     ZRQQQQQQQQQQQQQTZ                         
                          ZQQQQQQQQQQQQQTZ            ZZZZ       ZSQQQQQQQQQQQQQQZ                          
                           XQQQQQQQQQQQQQQQQRRUZ  Z             ZTQQQQQQQQQQQQQQX                           
                           ZVQQQQQQQQQQQQQQQQQVZ XQQVZ YWXXXXWVRQQQQQQQQQQQQQQQUZ                           
                             WQQQQQQQQQQQQQQQQY ZTQQZ ZTQQQQQQQQQQQQQQQQQQQQQQV                             
                             ZXQQQQQQQQQQQQQQQSUWRQU  YRQQQQQQQQQQQQQQQQQQQQQWZ                             
                               ZSQQQQQQQQQQQQQQQQQQQQSSQQQQQQQQQQQQQQQQQQQQSZ                               
                                 XRQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQRX                                 
                                   YRQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQRY                                   
                                    ZZUQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQUYZ                                    
                                        YVSQQQQQQQQQQQQQQQQQQQQQQSVYZ                                       
                                            ZXURRRQQQQQQQQRRRTXZ                                            
                                                 ZZZZZZZZZZ                                                 
                                                                                                            
                                                                                                            
                                                                                                            
                                                                                                            
                                    ---     SHUTDOWN COMPLETE       ---
"""

# --- MarketDataManager Class ---
class MarketDataManager:
    def __init__(self, symbols, profit_threshold):
        self.symbols_to_watch = symbols
        self.profit_threshold = profit_threshold
        self.tickers_by_base = defaultdict(dict)
        self.markets = {}
        self.lock = asyncio.Lock()
        self.current_opportunities = []
        self.last_alert_time = 0 

    async def load_all_markets(self, exchanges):
        print("Loading market data sequentially (for fees and symbol checks)...")
        for ex_id, ex_obj in exchanges.items():
            try:
                await ex_obj.load_markets()
                self.markets[ex_id] = ex_obj.markets
                print(f"  - Successfully loaded markets for {ex_id.upper()}")
            except Exception as e:
                print(f"  - FAILED to load markets for {ex_id.upper()}: {type(e).__name__} - {e}")
        print("Market data loading complete.")

    async def update_and_analyze(self, exchange_id, symbol, bid, ask):
        try:
            base, quote = symbol.split('/')
        except ValueError:
            return
        if quote not in STABLECOINS:
            return
        async with self.lock:
            ticker_data = {'bid': bid, 'ask': ask, 'exchange': exchange_id, 'symbol': symbol}
            self.tickers_by_base[base][(exchange_id, symbol)] = ticker_data
            tickers_for_base = list(self.tickers_by_base[base].values())
            if len(tickers_for_base) < 2:
                return
            lowest_ask = min(tickers_for_base, key=lambda x: x['ask'])
            highest_bid = max(tickers_for_base, key=lambda x: x['bid'])
            if lowest_ask['exchange'] == highest_bid['exchange'] and lowest_ask['symbol'] == highest_bid['symbol']:
                return
            buy_fee = self.markets.get(lowest_ask['exchange'], {}).get(lowest_ask['symbol'], {}).get('taker', 0.002)
            sell_fee = self.markets.get(highest_bid['exchange'], {}).get(highest_bid['symbol'], {}).get('taker', 0.002)
            cost_to_buy = lowest_ask['ask'] * (1 + buy_fee)
            revenue_from_sell = highest_bid['bid'] * (1 - sell_fee)
            if cost_to_buy > 0:
                net_profit_pct = ((revenue_from_sell / cost_to_buy) - 1) * 100
                requires_swap = lowest_ask['symbol'].split('/')[1] != highest_bid['symbol'].split('/')[1]
                opportunity_data = {
                    'base_symbol': base,
                    'buy_symbol': lowest_ask['symbol'],
                    'sell_symbol': highest_bid['symbol'],
                    'buy_exchange': lowest_ask['exchange'],
                    'sell_exchange': highest_bid['exchange'],
                    'buy_price': lowest_ask['ask'],
                    'sell_price': highest_bid['bid'],
                    'profit_pct': net_profit_pct,
                    'requires_swap': requires_swap
                }
                self.current_opportunities.append(opportunity_data)
                if net_profit_pct >= self.profit_threshold:
                    if time.time() - self.last_alert_time > 30:
                        note = " (Note: Requires stablecoin swap)" if requires_swap else ""
                        print("\n" + "="*80)
                        print(f"!!! ARBITRAGE ALERT - {time.ctime()} !!!")
                        print(f"  Asset:            {base}")
                        print(f"  Buy on:           {lowest_ask['exchange'].upper()} as {lowest_ask['symbol']} @ {lowest_ask['ask']}")
                        print(f"  Sell on:          {highest_bid['exchange'].upper()} as {highest_bid['symbol']} @ {highest_bid['bid']}")
                        print(f"  Estimated PROFIT: {net_profit_pct:.4f}% (after fees){note}")
                        print("="*80 + "\n")
                        self.last_alert_time = time.time()

# --- Polling Task ---
async def poll_tickers_for_exchange(manager, exchange):
    symbols_on_exchange = [s for s in manager.symbols_to_watch if s in manager.markets.get(exchange.id, {})]
    if not symbols_on_exchange:
        print(f"INFO: No target symbols found on {exchange.id.upper()}. Skipping poller.")
        return
    print(f"Starting Ticker polling for: {exchange.id.upper()} ({len(symbols_on_exchange)} symbols)")
    while True:
        try:
            tickers = await exchange.fetch_tickers(symbols_on_exchange)
            for symbol, ticker in tickers.items():
                best_bid = ticker.get('bid')
                best_ask = ticker.get('ask')
                if best_bid is not None and best_ask is not None and best_ask > 0:
                    await manager.update_and_analyze(exchange.id, symbol, best_bid, best_ask)
            await asyncio.sleep(exchange.rateLimit / 1000)
        except Exception as e:
            if isinstance(e, (ccxt.NotSupported, ccxt.ExchangeError)):
                 await poll_tickers_one_by_one(manager, exchange, symbols_on_exchange)
            else:
                print(f"ERROR in {exchange.id.upper()} poller: {type(e).__name__} - {e}. Retrying in 15s...")
                await asyncio.sleep(15)

# Fallback poller
async def poll_tickers_one_by_one(manager, exchange, symbols_on_exchange):
    print(f"INFO: {exchange.id.upper()} does not support bulk tickers. Switching to individual polling.")
    while True:
        try:
            for symbol in symbols_on_exchange:
                try:
                    ticker = await exchange.fetch_ticker(symbol)
                    best_bid = ticker.get('bid')
                    best_ask = ticker.get('ask')
                    if best_bid is not None and best_ask is not None and best_ask > 0:
                        await manager.update_and_analyze(exchange.id, symbol, best_bid, best_ask)
                except Exception:
                    pass
            await asyncio.sleep(2)
        except Exception as e:
            print(f"ERROR in {exchange.id.upper()} individual poller: {type(e).__name__} - {e}. Reconnecting in 15s...")
            await asyncio.sleep(15)
            break

# --- Periodic Report Task ---
async def periodic_report_task(manager):
    while True:
        await asyncio.sleep(REPORT_INTERVAL)
        async with manager.lock:
            opportunities_to_report = list(manager.current_opportunities)
            manager.current_opportunities.clear()
        if not opportunities_to_report:
            print(f"--- ({time.strftime('%H:%M:%S')}) Status: System running. No new market data in the last {REPORT_INTERVAL}s. ---")
            continue
        sorted_opportunities = sorted(opportunities_to_report, key=lambda x: x['profit_pct'], reverse=True)
        unique_opportunities = {}
        for op in sorted_opportunities:
            key = (op['buy_symbol'], op['buy_exchange'], op['sell_symbol'], op['sell_exchange'])
            if key not in unique_opportunities:
                unique_opportunities[key] = op
        top_opportunities = list(unique_opportunities.values())[:3]
        print("\n" + "-"*30 + f" TOP 3 DIFFERENCES ({time.strftime('%H:%M:%S')}) " + "-"*30)
        print(f"{'ASSET':<8} | {'BUY VIA':<22} | {'SELL VIA':<22} | {'PROFIT %':<10} | {'NOTES'}")
        print("-"*95)
        for op in top_opportunities:
            buy_info = f"{op['buy_exchange'].upper()} @ {op['buy_price']:.4f} ({op['buy_symbol']})"
            sell_info = f"{op['sell_exchange'].upper()} @ {op['sell_price']:.4f} ({op['sell_symbol']})"
            profit_str = f"{op['profit_pct']:>8.4f}%"
            note = "Swap required" if op['requires_swap'] else ""
            print(f"{op['base_symbol']:<8} | {buy_info:<22} | {sell_info:<22} | {profit_str:<10} | {note}")
        print("-" * 95 + "\n")

# --- Main Orchestrator ---
async def main():
    print("Initializing Crypto Arbitrage Monitor...")
    manager = MarketDataManager(SYMBOLS_TO_CHECK, PROFIT_THRESHOLD)
    exchanges = {}
    for ex_id in EXCHANGES_TO_CHECK:
        api_key = os.getenv(f"{ex_id.upper()}_API_KEY")
        secret = os.getenv(f"{ex_id.upper()}_SECRET")
        config = {'options': {'defaultType': 'spot'}, 'enableRateLimit': True}
        if api_key and secret:
            config['apiKey'] = api_key
            config['secret'] = secret
        exchanges[ex_id] = getattr(ccxt_async, ex_id)(config)
    try:
        await manager.load_all_markets(exchanges)
        tasks = [poll_tickers_for_exchange(manager, ex_obj) for ex_obj in exchanges.values()]
        tasks.append(periodic_report_task(manager))
        print(f"\nStarting {len(exchanges)} exchange pollers. Monitoring for opportunities...")
        print(f"An instant alert will be shown for profits > {PROFIT_THRESHOLD}%.")
        print(f"A summary of the top 3 price differences will be shown every {REPORT_INTERVAL} seconds.")
        print("Press Ctrl+C to stop the bot.")
        await asyncio.gather(*tasks)
    finally:
        print("\nClosing all exchange connections gracefully...")
        close_tasks = [ex.close() for ex in exchanges.values()]
        await asyncio.gather(*close_tasks, return_exceptions=True)
        print("All resources released.")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nShutdown signal received.")
        print(ASCII_FAREWELL)
