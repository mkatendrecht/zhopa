import ccxt.async_support as ccxt_async
import asyncio
from collections import defaultdict

# --- Configuration (No Changes) ---
EXCHANGES_TO_CHECK = [
    'binance', 'kucoin', 'bybit', 'gateio', 'kraken',
    'coinbase', 'mexc', 'okx', 'htx', 'bitget'
]
SYMBOLS_TO_CHECK = [
    'BTC/USDT', 'ETH/USDT', 'SOL/USDT', 'XRP/USDT', 'DOGE/USDT',
    'ADA/USDT', 'AVAX/USDT', 'LTC/USDT', 'LINK/USDT', 'MATIC/USDT'
]
DEFAULT_TAKER_FEE = 0.002

# --- Helper functions no longer manage connections ---
# They now receive an already-created exchange object.

async def load_markets_from_exchange(exchange, market_dict):
    """Loads markets using a pre-existing exchange object."""
    try:
        market_dict[exchange.id] = await exchange.load_markets()
    except Exception:
        market_dict[exchange.id] = None

async def fetch_ticker_from_exchange(exchange, symbol):
    """Fetches a ticker using a pre-existing exchange object."""
    try:
        ticker = await exchange.fetch_ticker(symbol)
        if ticker.get('bid') and ticker.get('ask'):
            return {
                'exchange': exchange.id,
                'symbol': symbol,
                'bid': ticker.get('bid'),
                'ask': ticker.get('ask'),
                'timestamp': ticker.get('timestamp')
            }
        return None
    except Exception:
        return None

# --- Main function now controls the entire connection lifecycle ---
async def find_arbitrage_opportunities():
    """
    Manages connection lifecycle to robustly scan for arbitrage.
    """
    # 1. Instantiate all exchange objects ONCE at the beginning.
    exchanges = {
        exchange_id: getattr(ccxt_async, exchange_id)({'enableRateLimit': True})
        for exchange_id in EXCHANGES_TO_CHECK
    }
    
    all_markets = {}
    
    try:
        # 2. Load all market data using the persistent exchange objects.
        market_load_tasks = [
            load_markets_from_exchange(ex, all_markets) for ex in exchanges.values()
        ]
        await asyncio.gather(*market_load_tasks)
        print("Fee structures loaded for all exchanges.")

        # 3. Create ticker tasks ONLY for valid pairs, passing the exchange objects.
        ticker_fetch_tasks = []
        for symbol in SYMBOLS_TO_CHECK:
            for exchange_id, exchange_obj in exchanges.items():
                if all_markets.get(exchange_id) and symbol in all_markets[exchange_id]:
                    ticker_fetch_tasks.append(
                        fetch_ticker_from_exchange(exchange_obj, symbol)
                    )
        
        print(f"Scanning {len(ticker_fetch_tasks)} valid tickers...")
        all_tickers = await asyncio.gather(*ticker_fetch_tasks)
        valid_tickers = [ticker for ticker in all_tickers if ticker]

        # 4. Perform analysis (this part is unchanged)
        tickers_by_symbol = defaultdict(list)
        for ticker in valid_tickers:
            tickers_by_symbol[ticker['symbol']].append(ticker)
        
        all_calculated_opportunities = []
        # ... (analysis logic is the same) ...
        for symbol, tickers in tickers_by_symbol.items():
            if len(tickers) < 2: continue
            lowest_ask_exchange = min(tickers, key=lambda x: x['ask'])
            highest_bid_exchange = max(tickers, key=lambda x: x['bid'])
            low_ask, high_bid = lowest_ask_exchange['ask'], highest_bid_exchange['bid']
            buy_exchange_id, sell_exchange_id = lowest_ask_exchange['exchange'], highest_bid_exchange['exchange']
            try:
                buy_market_data = all_markets.get(buy_exchange_id, {})
                sell_market_data = all_markets.get(sell_exchange_id, {})
                buy_fee = buy_market_data.get(symbol, {}).get('taker', DEFAULT_TAKER_FEE)
                sell_fee = sell_market_data.get(symbol, {}).get('taker', DEFAULT_TAKER_FEE)
            except (KeyError, TypeError):
                buy_fee, sell_fee = DEFAULT_TAKER_FEE, DEFAULT_TAKER_FEE
            cost_to_buy = low_ask * (1 + buy_fee)
            revenue_from_sell = high_bid * (1 - sell_fee)
            net_profit_pct = ((revenue_from_sell / cost_to_buy) - 1) * 100
            raw_spread_pct = ((high_bid / low_ask) - 1) * 100
            all_calculated_opportunities.append({'symbol': symbol, 'buy_from': buy_exchange_id, 'sell_to': sell_exchange_id, 'buy_price': low_ask, 'sell_price': high_bid, 'net_profit_pct': net_profit_pct, 'raw_spread_pct': raw_spread_pct})

        if not all_calculated_opportunities:
            print("\nScan complete. No pairs were found on more than one exchange.")
            return

        sorted_opportunities = sorted(all_calculated_opportunities, key=lambda x: x['net_profit_pct'], reverse=True)
        print("\n--- Top 3 Opportunities (Sorted by NET Profit After Fees) ---")
        for i, opp in enumerate(sorted_opportunities[:3]):
            print(f"\n#{i+1}: {opp['symbol']}\n    Buy on:   {opp['buy_from']:<10} @ {opp['buy_price']}\n    Sell on:  {opp['sell_to']:<10} @ {opp['sell_price']}\n    Raw Spread: {opp['raw_spread_pct']:.4f}%\n    NET PROFIT: {opp['net_profit_pct']:.4f}%")

    finally:
        # 5. After ALL work is done, close every connection gracefully.
        print("\nClosing all exchange connections...")
        await asyncio.gather(*(ex.close() for ex in exchanges.values()))
        print("All connections closed.")

if __name__ == "__main__":
    asyncio.run(find_arbitrage_opportunities())
